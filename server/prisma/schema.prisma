generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  email       String       @unique
  name        String       @unique
  password    String
  inspections Inspection[]
}

model Car {
  id             Int          @id @default(autoincrement())
  bodyType       BodyType     @relation(fields: [bodyTypeId], references: [id])
  bodyTypeId     Int
  model          Model        @relation(fields: [modelId], references: [id])
  modelId        Int
  engineCapacity Int /// [cm^3]
  enginePower    Int /// [HP]
  engineType     EngineType   @relation(fields: [engineTypeId], references: [id])
  engineTypeId   Int
  inspections    Inspection[]
}

model BodyType {
  id   Int    @id @default(autoincrement())
  name String @unique
  Car  Car[]
}

model EngineType {
  id   Int    @id @default(autoincrement())
  name String @unique
  Car  Car[]
}

model Make {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Model Model[]
}

model Model {
  id     Int    @id @default(autoincrement())
  make   Make   @relation(fields: [makeId], references: [id])
  makeId Int
  name   String

  Car Car[]
  @@unique([makeId, name])
}

model Inspection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  station   Station  @relation(fields: [stationId], references: [id])
  stationId Int

  car     Car @relation(fields: [carId], references: [id])
  carId   Int
  mileage Int /// [km]
  age     Int /// [months]

  inspectionQualitativeFaults  InspectionQualitativeFault[]
  inspectionQuantitativeFaults InspectionQuantitativeFault[]

  result Result
}

model InspectionQualitativeFault {
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  inspectionId Int

  qualitativeFault   QualitativeFault @relation(fields: [qualitativeFaultId], references: [id])
  qualitativeFaultId Int

  dangerLevel DangerLevel

  @@unique([inspectionId, qualitativeFaultId])
}

model QualitativeFault {
  id           Int           @id @default(autoincrement())
  component    String
  part         String?
  description  String
  dangerLevels DangerLevel[]

  InspectionQualitativeFault InspectionQualitativeFault[]
  @@unique([component, part, description])
}

model InspectionQuantitativeFault {
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  inspectionId Int

  quantitativeFault   QuantitativeFault @relation(fields: [quantitativeFaultId], references: [id])
  quantitativeFaultId Int

  value Float

  @@unique([inspectionId, quantitativeFaultId])
}

model QuantitativeFault {
  id          Int     @id @default(autoincrement())
  component   String
  part        String?
  description String
  minValue    Float?
  maxValue    Float?
  unit        String

  InspectionQuantitativeFault InspectionQuantitativeFault[]
  @@unique([component, part, description])
}

enum Result {
  POSITIVE
  NEGATIVE
}

enum DangerLevel {
  MINOR
  SIGNIFICANT
  MAJOR
}

// Identification
// Additional equipment
// Tires
// Lights
// Braking system
// Steering system
// Undercarriage, suspension and other
// Electrical installation
// Body and equipment
// Environmental protection issues
// Additional conditions
