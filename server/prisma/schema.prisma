generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  email       String       @unique
  name        String
  password    String
  inspections Inspection[]
}

model Model {
  id             Int          @id @default(autoincrement())
  bodyType       String
  make           String
  model          String
  generation     String?
  engineCapacity Float /// [dm^3]=[liters]
  enginePower    Int /// [HP]
  engineType     EngineType
  inspections    Inspection[]
}

model Inspection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  station   Station  @relation(fields: [stationId], references: [id])
  stationId Int

  // Identification
  model                 Model    @relation(fields: [modelId], references: [id])
  modelId               Int
  mileage               Int /// [KM]
  firstRegistrationDate DateTime
  age                   Int /// [months] calc: createdAt - firstRegistrationDate

  // Additional equipment

  // Tires
  // Lights
  // Braking system
  // Steering system
  // Undercarriage, suspension and other
  // Electrical installation
  // Body and equipment
  // Environmental protection issues
  // Additional conditions

  result Result
}

model Action {
  id Int @id @default(autoincrement())
}

enum EngineType {
  DIESEL
  PETROL
  ELECTRIC
  HYBRID
}

enum Result {
  POSITIVE
  NEGATIVE
}
